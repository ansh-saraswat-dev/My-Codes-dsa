#include <bits/stdc++.h> 
// int solveMem(vector<int> &nums,int n,vector<int>&dp){
//     if(n<0) return 0;
//     if(n==0) return nums[0];
//     if(dp[n] != -1) return dp[n];
//     int inc=solveMem(nums,n-2,dp)+nums[n];
//     int exl=solveMem(nums,n-1,dp)+0;
//     dp[n]=max(inc,exl);
//     return dp[n];
// }
// int solveTab(vector<int>&nums){
//     int n=nums.size();
//      if (n == 0) return 0;
//     if (n == 1) return nums[0];
//     vector<int>dp(n,0);
//     dp[0]=nums[0];
//     dp[1]=max(nums[0],nums[1]);
//     for(int i=2;i<n;i++){
//         int inc=dp[i-2] + nums[i];
//         int exc=dp[i-1];
//         dp[i]=max(inc,exc);
//         return dp[n-1];
//     }
// }
int solveSpace(vector<int>&nums){
    int n=nums.size();
    int prev2=0;
    int prev1=nums[0];
    for(int i=1;i<n;i++){
        int in=prev2+nums[i];
        int ex=prev1+0;
        int ans=max(in,ex);
        prev2=prev1;
        prev1=ans;
    }
    return prev1;
}
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    // int n = nums.size();
    // vector<int> dp(n,-1);
    // return solveMem(nums,n-1,dp);
    return solveSpace(nums);
}
